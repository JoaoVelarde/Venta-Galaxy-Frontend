@page "/productos/list"
@using Microsoft.AspNetCore.Components.WebAssembly.Hosting;
@inject IProductoProxy Proxy
@inject ICategoriaProxy CategoriaProxy
@inject NavigationManager Nav
@inject IToastService Toaster
@inject SweetAlertService Swal
@inject IJSRuntime JsRuntime
@inject HttpClient HttpClient
@inject IWebAssemblyHostEnvironment WebAssemblyHost

<ListaGenerica TItem="ProductoDtoResponse" Lista="Productos" Titulo="Lista de Productos">
    <Filtros>
        <div class="row">
            <div class="col">
                <div class="mb-3">
                    <label for="producto" class="form-label">Nombre:</label>
                    <InputText type="text" class="form-control" id="producto" @bind-Value="BusquedaRequest.Producto" />
                </div>
            </div>
            <div class="col-3">
            <label for="categoria" class="form-label">Categoría:</label>
            <InputSelect id="categoria" class="form-select" @bind-Value="BusquedaRequest.CategoriaId">
            <option value="">Todos</option>
            @foreach (var item in Categorias)
            {
            <option value="@item.Id">@item.Nombre</option>
            }
            </InputSelect>
            </div>
        </div>
        <div class="row mt-3 justify-content-end">
            <div class="col-auto">
                <button class="btn btn-outline-primary" @onclick="OnSearch">
                    <i class="bi bi-search me-1"></i>Buscar
                </button>
            </div>
            <div class="col-auto">
                <button class="btn btn-outline-primary" @onclick="OnLimpiar">
                    <i class="bi bi-eraser-fill me-1"></i>Limpiar
                </button>
            </div>
            <div class="col-auto">
                <button class="btn btn-primary" @onclick="OnNuevo"><i class="bi bi-plus-circle me-1"></i>Nuevo</button>
            </div>
        </div>
    </Filtros>
    <Cabeceras>
        <th>#</th>
        <th>Producto</th>
        <th>Descripcion</th>
        <th>Categoria</th>
        <th>Cantidad</th>
        <th>Precio Compra</th>
        <th>Precio Venta</th>
        <th>Acción</th>
    </Cabeceras>
    <Detalles>
        <td>@context.Id</td>
        <td>@context.Nombre</td>
        <td>@context.Descripcion</td>
        <td>@context.Categoria</td>
        <td>@context.Cantidad</td>
        <td>@context.PrecioCompra</td>
        <td>@context.PrecioVenta</td>
        <td>
             <button type="button" class="btn" @onclick="() => OnEditar(context.Id)">
            <i class="bi bi-pencil-fill"></i>
            </button>
            <button type="button" class="btn" @onclick="() => OnEliminar(context.Id)">
            <i class="bi bi-trash-fill"></i>
            </button>
        </td>
    </Detalles>
</ListaGenerica>

<DataPager @ref="Paginador" Result="PagedResult" OnPageChanged="PaginaCambiada" OnPageSizeChanged="FilasPorPagina"></DataPager>

<LoadingComponent IsLoading="IsLoading" />

@code {

    public BusquedaProductoRequest BusquedaRequest { get; set; } = new()
        {
            Producto = null,
            CategoriaId = null,
            Pagina = 1,
            Filas = 5
        };
    public ICollection<ProductoDtoResponse>? Productos { get; set; }

    public bool IsLoading { get; set; }

    public DataPager Paginador { get; set; } = default!;

    public PagedResult<ProductoDtoResponse> PagedResult { get; set; } = default!;

    public ICollection<CategoriaDtoResponse> Categorias { get; set; } = new List<CategoriaDtoResponse>();

    protected override async Task OnInitializedAsync()
    {
        Categorias = await CategoriaProxy.ListAsync();
 
        PagedResult = new PagedResult<ProductoDtoResponse>()
            {
                CurrentPage = BusquedaRequest.Pagina,
                RowPerPage = BusquedaRequest.Filas
            };

        await OnSearch();
    }

    private async Task OnSearch()
    {
        try

        {
            IsLoading = true;

            var response = await Proxy.ListAsync(BusquedaRequest);

            Productos = response.Data;
            if (Productos is not null)
            {
                PagedResult.Results = Productos;
                PagedResult.RowCount = Productos.Count;
                PagedResult.TotalPages = response.TotalPages;
            }
        }
        catch (Exception ex)
        {
            Toaster.ShowError(ex.Message);
        }
        finally
        {
            IsLoading = false;
        }
    }

    private void OnLimpiar()
    {
        BusquedaRequest = new() { Pagina = 1, Filas = 5 };
    }

    private void OnNuevo()
    {
        Nav.NavigateTo("/productos/nuevo");
    }

    private void OnEditar(int id)
    {
        Nav.NavigateTo($"/productos/editar/{id}");
    }

    private async Task OnEliminar(int id)
    {
        try
        {
            var result = await Swal.FireAsync(new SweetAlertOptions
                {
                    Text = "Desea eliminar el Producto?",
                    Title = "Eliminar",
                    Icon = SweetAlertIcon.Question,
                    ShowCancelButton = true
                });

            if (result.IsConfirmed)
            {
                await Proxy.DeleteAsync(id);

                await OnSearch();
            }
        }
        catch (Exception ex)
        {
            Toaster.ShowError(ex.Message);
        }
    }

    private async Task PaginaCambiada()
    {
        IsLoading = true;
        BusquedaRequest.Pagina = PagedResult.CurrentPage;
        BusquedaRequest.Filas = PagedResult.RowPerPage;
        await OnSearch();
    }

    private async Task FilasPorPagina()
    {
        BusquedaRequest.Pagina = PagedResult.CurrentPage;
        BusquedaRequest.Filas = PagedResult.RowPerPage;
        await OnSearch();
    }




}
